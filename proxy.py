from flask import Flask, request, jsonify, make_response
from flask_cors import CORS
import requests
import os
import logging
import signal
import sys
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# üîë API Keys
GOOGLE_API_KEY = "AIzaSyBfMx7kgyJU2wmIDBn4e1qFRVx2aaYeWUo"
GOOGLE_CX = "26f006107f7d34c06"

class SearchEngine:
    @staticmethod
    def duckduckgo_search(query):
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo API"""
        try:
            url = f"https://api.duckduckgo.com/?q={query}&format=json&no_html=1&skip_disambig=1"
            response = requests.get(url, timeout=8)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"DuckDuckGo error: {e}")
            return None

    @staticmethod
    def google_search(query):
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Custom Search API"""
        try:
            url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={GOOGLE_API_KEY}&cx={GOOGLE_CX}"
            response = requests.get(url, timeout=8)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Google Search error: {e}")
            return None

@app.route("/search")
def search():
    start_time = datetime.now()
    query = request.args.get("q", "").strip()
    
    if not query:
        return jsonify({"error": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"}), 400

    logger.info(f"Search query: {query}")

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º DuckDuckGo
    ddg_data = SearchEngine.duckduckgo_search(query)
    if ddg_data and (ddg_data.get("RelatedTopics") or ddg_data.get("AbstractText")):
        logger.info(f"DuckDuckGo results found for: {query}")
        return jsonify({
            "source": "ddg", 
            "data": ddg_data,
            "query_time": f"{(datetime.now() - start_time).total_seconds():.2f}s"
        })

    # –ï—Å–ª–∏ DDG –ø—É—Å—Ç–æ–π ‚Üí Google Custom Search
    google_data = SearchEngine.google_search(query)
    if google_data and "items" in google_data:
        logger.info(f"Google results found for: {query}")
        return jsonify({
            "source": "google", 
            "data": google_data,
            "query_time": f"{(datetime.now() - start_time).total_seconds():.2f}s"
        })

    # –ï—Å–ª–∏ –≤—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å
    logger.warning(f"No results found for: {query}")
    return jsonify({
        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
        "query_time": f"{(datetime.now() - start_time).total_seconds():.2f}s"
    }), 404

@app.route("/ai/chat", methods=["POST"])
def ai_chat():
    """AI Chat endpoint —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏"""
    try:
        data = request.get_json()
        message = data.get("message", "").strip()
        
        if not message:
            return jsonify({"error": "Empty message"}), 400

        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è AI - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI API
        responses = [
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫. –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.",
            "–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –±—Ä–∞—É–∑–µ—Ä–∞.",
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.",
        ]
        
        import random
        reply = random.choice(responses)
        
        return jsonify({
            "reply": reply,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"AI chat error: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/health")
def health():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "healthy", 
        "service": "Miku Browser Proxy",
        "timestamp": datetime.now().isoformat()
    })

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info("Received shutdown signal")
    sys.exit(0)

if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        logger.info("Starting Miku Browser Proxy Server on http://127.0.0.1:5000")
        app.run(host="127.0.0.1", port=5000, debug=False)
    except Exception as e:
        logger.error(f"Proxy server error: {e}")
        sys.exit(1)